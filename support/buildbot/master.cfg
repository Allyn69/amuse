# -*- python -*-
# ex: set syntax=python:

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.f
c = BuildmasterConfig = {}


####### code

import re
from buildbot.process.properties import WithProperties
from buildbot.steps.shell import ShellCommand

class Nose(ShellCommand):
    name = "nose"
    descriptionDone = ['testing done']
    
    def __init__(self,
        noseoptions = ['-v', 'test'], 
        command = None,  
        **kwarguments
    ):
        nosecommand = [
            'nosetests'
        ]
        nosecommand.extend(noseoptions)
        
        ShellCommand.__init__(self, command=nosecommand, **kwarguments)
        
        self.addFactoryArguments(
            noseoptions = noseoptions
        )
     
    def describe(self, done=False):
        if not done:
            return ['testing']
        else:
            return self.descriptionDone
 
    def createSummary(self, log):
        msgs = ['WARNING', 'ERROR', 'SEVERE']
        self.descriptionDone = self.descriptionDone[:]
        warnings = []
        next_line_is_summary = False
        summary_re = re.compile('^Ran\s+(\d+)\s+tests in\s+([\d\.]+)s')
        failed_re = re.compile('^FAILED\s+\((.+)\)')
        ok_re = re.compile('^OK\s+\((.+)\)')
        lines = log.getText().split('\n')
        number_of_tests = 0
        time_taken = None
        for line in lines:
            match = summary_re.match(line)
            if match:
                number_of_tests = int(match.group(1))
                time_taken = match.group(2)
        offset = -1
        counts = {'errors':0, 'failures': 0, 'SKIP':0}
        while offset > -10:
            last_line = lines[offset]
            if last_line.startswith('FAILED'):
                match = failed_re.match(last_line)
                if match:
                    content = match.group(1)
                    counts = self.parse_counts(content)
                break
            elif last_line.startswith('OK'):
                match = ok_re.match(last_line)
                if match:
                    content = match.group(1)
                    counts = self.parse_counts(content)
                break
            else:
                pass
            offset -= 1
        
        number_of_failures = counts['failures']
        number_of_errors = counts['errors']
        number_of_skipped = counts['SKIP']
        
        if number_of_tests > 0:
            #self.addCompleteLog("tests", str(number_of_tests))
            self.descriptionDone.append('{0} tests'.format(number_of_tests))
        if number_of_errors > 0:
            self.descriptionDone.append('{0} errors'.format(number_of_errors))
        if number_of_skipped > 0:
            self.descriptionDone.append('{0} skipped'.format(number_of_skipped))
        if number_of_failures > 0:
            self.descriptionDone.append('{0} failures'.format(number_of_failures))
            
        self.step_status.setStatistic('tests', number_of_tests)
        self.step_status.setStatistic('skipped', number_of_skipped)
        self.step_status.setStatistic('failures', number_of_failures)
        self.step_status.setStatistic('errors', number_of_errors)
    
    def parse_counts(self, str):
        parts = str.split(',')
        result = {'errors':0, 'failures': 0, 'SKIP':0}
        for x in parts:
            x = x.strip()
            name, count = x.split('=')
            count = int(count.strip())
            result[name.strip()] = count
        return result



####### BUILDSLAVES

# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password.  The same
# slave name and password must be configured on the slave.
from buildbot.buildslave import BuildSlave
from buildbot.libvirtbuildslave import LibVirtSlave, Connection

c['slaves'] = [
   LibVirtSlave(
		'ubuntu-10.04-desktop-i386-mpich2', 
		'amuse2bb',
		Connection('qemu:///system'),
         '/home/vanelteren/vm/ubuntu-10.04-desktop-i386-mpich2.img', 
         #'/home/buildbot/images/base_image'
   )
   ,
   LibVirtSlave(
		'ubuntu-10.04-desktop-i386-openmpi', 
		'amuse2cc',
		Connection('qemu:///system'),
         '/home/vanelteren/vm/ubuntu-10.04-desktop-i386-openmpi.img', 
         #'/home/buildbot/images/base_image'
   )
   ,
   LibVirtSlave(
		'ubuntu-lucid-desktop-amd64-openmpi', 
		'amuse2rr',
		Connection('qemu:///system'),
         '/var/lib/libvirt/images/ubuntu-lucid-desktop-amd64-openmpi.img', 
         #'/home/buildbot/images/base_image'
   )
   ,
   BuildSlave(
		'strw-64bit-mpich2', 
		'amuse2dd'
   )
   ,
   BuildSlave(
		'lgm-node', 
		'amuse2ee'
   )
   ,
   BuildSlave(
		'ubuntu-64bit', 
		'amuse2ff'
   )
   ,
   BuildSlave(
		'macos-64bit', 
		'amuse2ff'
   )
   ,
   BuildSlave(
		'macos-32bit', 
		'amuse2ff'
   )
   ,
   BuildSlave(
		'fedora8-64bit', 
		'amuse2ff'
   )
   ,
   BuildSlave(
		'centos5-64bit', 
		'amuse2ff'
   )
   ,
   BuildSlave(
		'strw-sloe', 
		'amuse2ff'
   )
   ,
   BuildSlave(
		'strw-striene', 
		'amuse2ff'
   )
   ,
   BuildSlave(
		'strw-goot', 
		'amuse2ff'
   )
]

# 'slavePortnum' defines the TCP port to listen on for connections from slaves.
# This must match the value configured into the buildslaves (with their
# --master option)
c['slavePortnum'] = 9989

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.

from buildbot.changes.svnpoller import SVNPoller
c['change_source'] = SVNPoller(
    svnurl='http://www.amusecode.org/svn/trunk',
    svnuser='buildbot',
    svnpasswd='build$5$bot',
    pollinterval=300,
    cachepath='/home/vanelteren/buildbot/amuse/svnpoller.cache'
)

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.

from buildbot.schedulers.basic import SingleBranchScheduler
from buildbot.schedulers import timed
from buildbot.changes import filter
c['schedulers'] = []
c['schedulers'].append(
    SingleBranchScheduler(
        name="full",
        change_filter=filter.ChangeFilter(branch=None),
        treeStableTimer=120,
        builderNames=["strw-mpich2"]
    )
)
c['schedulers'].append(
    timed.Nightly(
		name='nightly-openmpi',
        branch=None,
        builderNames=['ubuntu-32bit-openmpi-tests', 'gpubuild', 'make-source-release'],
        hour=2,
        minute=0
   )
)
c['schedulers'].append(
    timed.Nightly(
		name='nightly-binbuild',
        branch=None,
        builderNames=['binbuild',],
        hour=21,
        minute=0
   )
)
c['schedulers'].append(
    timed.Nightly(
	name='nightly-osx-build',
        branch=None,
        builderNames=['binbuild-Darwin_x86_64',],
        hour=23,
        minute=0
   )
)

c['schedulers'].append(
    timed.Nightly(
		name='early-evening-build',
        branch=None,
        builderNames=['binbuild-Darwin_i386'], #,"strw-slow-mpich2"],
        hour=19,
        minute=0
   )
)

c['schedulers'].append(
    timed.Nightly(
		name='nightly-mpich2',
        branch=None,
        builderNames=['ubuntu-32bit-mpich2-tests', 'strw-download-mpich2', 'gcc+ifort-9.1-64bit', 'icc+ifort-12-64bit'],
        hour=3,
        minute=0
   )
)
####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which slaves can execute them.  Note that any particular build will
# only take place on one slave.


c['builders'] = []

from buildbot.process.factory import BuildFactory
from buildbot.steps.source import SVN
from buildbot.steps.shell import ShellCommand
from buildbot.steps.master import MasterShellCommand
from buildbot.steps.transfer import StringDownload
from buildbot.steps.transfer import FileUpload
from buildbot.process.properties import Property
from buildbot.config import BuilderConfig
from buildbot.process.properties import WithProperties
import time

for arch, buildernames, slavenames in (
	('i386', ["ubuntu-32bit-openmpi-tests","ubuntu-32bit-openmpi-deb"], ["ubuntu-10.04-desktop-i386-openmpi"]),
	('amd64', ["ubuntu-64bit-openmpi-tests","ubuntu-64bit-openmpi-deb"], ["ubuntu-lucid-desktop-amd64-openmpi"]),
	):
    factory = BuildFactory()
    # check out the source
    factory.addStep(
        SVN(
            svnurl='http://www.amusecode.org/svn/trunk', 
            mode='copy', 
            username='buildbot',
            password='build$5$bot'
        )
    )

    # run configure
    factory.addStep(
        ShellCommand(
            command=["./configure"],
            env={'PYTHON': '/usr/bin/python'}
        )
    )

    # make the code
    factory.addStep(ShellCommand(command=["make", "clean"]))
    factory.addStep(ShellCommand(command=["make"]))
    factory.addStep(ShellCommand(command=["sleep", "30"]))
    #factory.addStep(ShellCommand(command=["nosetests", "-v", "test"]))
    factory.addStep(Nose(noseoptions=["-v", "test"]))
    c['builders'].append(
        BuilderConfig(
          name=buildernames[0],
          slavenames=slavenames,
          factory=factory
        )
    )

    #
    # Make ubuntu 32bit package
    #


    factory = BuildFactory()
    # check out the source
    factory.addStep(
        SVN(
            svnurl='http://www.amusecode.org/svn/trunk', 
            mode='copy', 
            username='buildbot',
            password='build$5$bot'
        )
    )

    factory.addStep(ShellCommand(command=["make", "distclean"]))
    factory.addStep(
        ShellCommand(
            command=["./configure"],
            env={'PYTHON': '/usr/bin/python'}
        )
    )
    factory.addStep(
        ShellCommand(
            command=[
                "python", 
                "support/debian.py",
                WithProperties("--version=r%(got_revision)s"),
                WithProperties("--arch=%(arch)s", arch = lambda x:arch),
            ]
        )
    )
    factory.addStep(
        FileUpload(
            slavesrc=WithProperties("amuse_r%(got_revision)s-0ubuntu-%(arch)s.deb", arch = lambda x: arch),
            masterdest=WithProperties("~/packages/ubuntu_10.04/amuse_r%(got_revision)s-0ubuntu-%(arch)s.deb", arch = lambda x: arch),
            mode=0644
        )
    )

    c['builders'].append(
        BuilderConfig(
          name=buildernames[1],
          slavenames=slavenames,
          factory=factory
        )
    )


#
#
#







factory = BuildFactory()
# check out the source
factory.addStep(
    SVN(
        svnurl='http://www.amusecode.org/svn/trunk', 
        mode='copy', 
        username='buildbot',
        password='build$5$bot'
    )
)

# run configure
factory.addStep(
    ShellCommand(
        command=["./configure"],
        env={'PYTHON': '/usr/bin/python'}
    )
)

# make the code
factory.addStep(ShellCommand(command=["mpdboot"]))
factory.addStep(ShellCommand(command=["mpdcheck"]))
factory.addStep(ShellCommand(command=["make", "clean"]))

factory.addStep(ShellCommand(command=["nosetests", "-v", "test/codes_tests/test_python_implementation.py"]))
factory.addStep(ShellCommand(command=["make"]))
factory.addStep(ShellCommand(command=["sleep", "45"]))
factory.addStep(ShellCommand(command=["mpdtrace"]))
#factory.addStep(ShellCommand(command=["nosetests", "-v", "test"]))
factory.addStep(Nose(noseoptions=["-v", "test"]))
factory.addStep(ShellCommand(command=["mpdallexit"]))

# run all tests
#factory.addStep(
#    ShellCommand(
#        command=["nosetests","-v", "test"]
#    )
#)
c['builders'].append(
    BuilderConfig(
	  name="ubuntu-32bit-mpich2-tests",
      slavenames=[
		"ubuntu-10.04-desktop-i386-mpich2"
	  ],
      factory=factory)
)


#
#  FOR STRW MACHINE'S
#

factory = BuildFactory()
# check out the source
factory.addStep(
    SVN(
        svnurl='http://www.amusecode.org/svn/trunk', 
        mode='update', 
        username='buildbot',
       password='build$5$bot'
    )
)
# run the tests (note that this will require that 'trial' is installed)
factory.addStep(
    ShellCommand(
        command=["./configure"],
        #env={'PYTHON': '/usr/bin/python'}
    )
)
factory.addStep(ShellCommand(command=["make", "clean"]))
factory.addStep(ShellCommand(command=["make"]))
factory.addStep(
	StringDownload(
		"backend : Agg",
		slavedest="matplotlibrc"
	)
)
factory.addStep(
    Nose(
        noseoptions=["--with-doctest", "-v", "test", "examples", "src"]
    )
)

c['builders'].append(
	BuilderConfig(
		name="strw-mpich2",
		slavenames=["strw-64bit-mpich2"],
		factory=factory
	)
)



#
# Check examples
#

factory = BuildFactory()
# check out the source
factory.addStep(
    SVN(
        svnurl='http://www.amusecode.org/svn/trunk', 
        mode='update', 
        username='buildbot',
       password='build$5$bot'
    )
)

factory.addStep(ShellCommand(command=["./configure"]))
factory.addStep(ShellCommand(command=["make", "clean"]))

factory.addStep(
	ShellCommand(
		command=["make"], 
		env = {'DOWNLOAD_CODES':'1'}
	)
)
factory.addStep(
	StringDownload(
		"backend : Agg",
		slavedest="matplotlibrc"
	)
)
factory.addStep(
    ShellCommand(
        command=["python", "sandbox/vanelteren/check_examples.py"],
        env={'PYTHONPATH': 'src',}
    )
)

c['builders'].append(
	BuilderConfig(
		name="strw-examples",
		slavenames=["strw-64bit-mpich2"],
		factory=factory
	)
)



#
# Fort ifort 9.1 and icc/ifort 12
#


for buildername, slavename in (
        ('gcc+ifort-9.1-64bit','strw-goot'), #'strw-striene'
        ('icc+ifort-12-64bit','strw-sloe'),
    ):

    factory = BuildFactory()
    # check out the source
    factory.addStep(
        SVN(
            svnurl='http://www.amusecode.org/svn/trunk', 
            mode='update', 
            username='buildbot',
           password='build$5$bot'
        )
    )
    factory.addStep(ShellCommand(command=["mpdboot", "--chkup"]))
    
    # run the tests (note that this will require that 'trial' is installed)
    factory.addStep(
        ShellCommand(
            command=["./configure"]
        )
    )
    factory.addStep(ShellCommand(command=["make", "clean"]))
    factory.addStep(ShellCommand(command=["make"]))
    
    factory.addStep(
        StringDownload(
            "backend : Agg",
            slavedest="matplotlibrc"
        )
    )
    
    factory.addStep(
        Nose(
            noseoptions=["--nologcapture", "--with-doctest", "-v", "test", "examples", "src"]
        )
    )

    c['builders'].append(
        BuilderConfig(
            name=buildername,
            slavenames=[slavename],
            factory=factory
        )
    )

#
#  FOR NIGHTLY BUILD OF SOURCE FILE
#

factory = BuildFactory()
# check out the source
factory.addStep(
    SVN(
        svnurl='http://www.amusecode.org/svn/trunk', 
        mode='update', 
        username='buildbot',
        password='build$5$bot'
    )
)
factory.addStep(
	ShellCommand(
		command=["make", "distclean"],
		env={
			'PYTHON': '/usr/bin/python'
		}
	)
)
factory.addStep(
	ShellCommand(
		command= ["make", "nightly"],
		env={
			'VERSION': WithProperties("%(datestr)s-r%(got_revision)s",datestr = lambda x : time.strftime('%Y%m%d')),
			'PYTHON': '/usr/bin/python'
		}
	)
)
factory.addStep(
	FileUpload(
		slavesrc=WithProperties("dist/amuse-%(datestr)s-r%(got_revision)s.tar.gz",datestr = lambda x : time.strftime('%Y%m%d')),
		masterdest=WithProperties("~/packages/source/amuse-%(datestr)s-r%(got_revision)s.tar.gz",datestr = lambda x : time.strftime('%Y%m%d')),
		mode=0644
	)
)

c['builders'].append(
	BuilderConfig(
		name="make-source-release",
		slavenames=["strw-64bit-mpich2"],
		factory=factory
	)
)



#
# For STRW with also DOWNLOAD CODES
#


factory = BuildFactory()
# check out the source
factory.addStep(
    SVN(
        svnurl='http://www.amusecode.org/svn/trunk', 
        mode='copy', 
        username='buildbot',
        password='build$5$bot'
    )
)
factory.addStep(
	ShellCommand(
		command=["make", "distclean"],
        	env={'PYTHON': '/usr/bin/python'}
	)
)
factory.addStep(
    ShellCommand(
        command=["./configure"],
        env={'PYTHON': '/usr/bin/python'}
    )
)
factory.addStep(
	ShellCommand(
		command=["make"], 
		env = {'DOWNLOAD_CODES':'1'}
	)
)
factory.addStep(
	StringDownload(
		"backend : Agg",
		slavedest="matplotlibrc"
	)
)

factory.addStep(
    Nose(
        noseoptions=["--with-doctest", "-v", "test", "examples", "src"]
    )
)

c['builders'].append(
	BuilderConfig(
		name="strw-download-mpich2",
		slavenames=["strw-64bit-mpich2"],
		factory=factory
	)
)
#
# For STRW with DOWNLOAD and slow (TURNED OFF, TAKES WAAAY TOO LONG)
#


factory = BuildFactory()
# check out the source
factory.addStep(
    SVN(
        svnurl='http://www.amusecode.org/svn/trunk', 
        mode='copy', 
        username='buildbot',
        password='build$5$bot'
    )
)
factory.addStep(
	ShellCommand(
		command=["make", "distclean"],
        	env={'PYTHON': '/usr/bin/python'}
	)
)
factory.addStep(
    ShellCommand(
        command=["./configure"],
        env={'PYTHON': '/usr/bin/python'}
    )
)
factory.addStep(
	ShellCommand(
		command=["make"], 
		env = {'DOWNLOAD_CODES':'1'}
	)
)
factory.addStep(
	StringDownload(
		"backend : Agg",
		slavedest="matplotlibrc"
	)
)
factory.addStep(
    ShellCommand(
        command=["nosetests", "-m", "(?:^|[b_.-]|[Ss]low)[Tt]est", "-v", "test"],
        timeout=72000
    )
)

if False:
	c['builders'].append(
		BuilderConfig(
			name="strw-slow-mpich2",
			slavenames=["strw-64bit-mpich2"],
			factory=factory
		)
	)

########################################################################
# GPU BUILDS 
factory = BuildFactory()
# check out the source
factory.addStep(
    SVN(
        svnurl='http://www.amusecode.org/svn/trunk', 
        mode='update', 
        username='buildbot',
        password='build$5$bot'
    )
)

gcc44prefix = '/home/vanelteren/amuse/env44'
gcc44env = {
    'PREFIX': gcc44prefix,
    'PATH': gcc44prefix+'/bin:${PATH}',
    'LD_LIBRARY_PATH': gcc44prefix+'/lib:${LD_LIBRARY_PATH}',
    'FC':'gfortran44',
    'F77':'gfortran44',
    'CC':'gcc44',
    'CXX':'g++44',
}

factory.addStep(
    ShellCommand(
        command=["./configure", "--enable-cuda", "--enable-sapporo2"], 
        env=gcc44env
    )
)
factory.addStep(ShellCommand(command=["make", "clean"],env=gcc44env))
factory.addStep(ShellCommand(command=["make"],env=gcc44env))


factory.addStep(
    Nose(
        noseoptions=["-v", "test"],
        env=gcc44env
    )
)

c['builders'].append(
    BuilderConfig(
        name="gpubuild44",
        slavenames=["lgm-node"],
        factory=factory
    )
)

########################################################################

factory = BuildFactory()
# check out the source
factory.addStep(
    SVN(
        svnurl='http://www.amusecode.org/svn/trunk', 
        mode='update', 
        username='buildbot',
        password='build$5$bot'
    )
)

factory.addStep(
    ShellCommand(
        command=["./configure", "--enable-cuda", "--enable-sapporo2"], 
        env={}
    )
)
factory.addStep(ShellCommand(command=["make", "clean"]))
factory.addStep(ShellCommand(command=["make"]))


factory.addStep(
    Nose(
        noseoptions=["-v", "test"]
    )
)

c['builders'].append(
    BuilderConfig(
        name="gpubuild",
        slavenames=["lgm-node"],
        factory=factory
    )
)
########################################################################



factory = BuildFactory()
# check out the source
factory.addStep(
    SVN(
        svnurl='http://www.amusecode.org/svn/trunk', 
        mode='update', 
        username='buildbot',
        password='build$5$bot'
    )
)

factory.addStep(ShellCommand(command=["rm", "-f", "amuseinstalled"], workdir='build/support/distribute/binbuild/build'))

factory.addStep(ShellCommand(command=["./build_amuseapp.sh"], workdir='build/support/distribute/binbuild/build'))

factory.addStep(
	FileUpload(
		slavesrc=WithProperties("support/distribute/binbuild/build/amuse-%(datestr)s-Darwin_x86_64.tar.gz",datestr = lambda x : time.strftime('%Y%m%d')),
		masterdest=WithProperties("~/packages/binary/amuse-%(datestr)s-Darwin_x86_64.tar.gz",datestr = lambda x : time.strftime('%Y%m%d')),
		mode=0644
	)
)
factory.addStep(
	MasterShellCommand(
		command = ["ln" , "-fs", 
			WithProperties("/home/vanelteren/packages/binary/amuse-%(datestr)s-Darwin_x86_64.tar.gz",datestr = lambda x : time.strftime('%Y%m%d')),
			'/home/vanelteren/packages/binary/amuse-latests-Darwin_x86_64.tar.gz'
		]
	)
)
factory.addStep(ShellCommand(command=["sudo", "shutdown", "-h", "now"]))

c['builders'].append(
	BuilderConfig(
		name="binbuild-Darwin_x86_64",
		slavenames=["macos-64bit"],
		factory=factory
	)
)


factory = BuildFactory()
factory.addStep(
    SVN(
        svnurl='http://www.amusecode.org/svn/trunk', 
        mode='update', 
        username='buildbot',
        password='build$5$bot'
    )
)



factory.addStep(ShellCommand(command=["rm", "-f", "amuseinstalled"], workdir='build/support/distribute/binbuild/build'))

factory.addStep(ShellCommand(command=["./build_amuseapp.sh"], workdir='build/support/distribute/binbuild/build'))


factory.addStep(
	FileUpload(
		slavesrc=WithProperties("support/distribute/binbuild/build/amuse-%(datestr)s-Darwin_i386.tar.gz",datestr = lambda x : time.strftime('%Y%m%d')),
		masterdest=WithProperties("~/packages/binary/amuse-%(datestr)s-Darwin_i386.tar.gz",datestr = lambda x : time.strftime('%Y%m%d')),
		mode=0644
	)
)
factory.addStep(
	MasterShellCommand(
		command = ["ln" , "-fs", 
			WithProperties("/home/vanelteren/packages/binary/amuse-%(datestr)s-Darwin_i386.tar.gz",datestr = lambda x : time.strftime('%Y%m%d')),
			'/home/vanelteren/packages/binary/amuse-latests-Darwin_i386.tar.gz'
		]
	)
)
factory.addStep(ShellCommand(command=["sudo", "shutdown", "-h", "now"]))

c['builders'].append(
	BuilderConfig(
		name="binbuild-Darwin_i386",
		slavenames=["macos-32bit"],
		factory=factory
	)
)


factory = BuildFactory()
# check out the source
factory.addStep(
    SVN(
        svnurl='http://www.amusecode.org/svn/trunk', 
        mode='update', 
        username='buildbot',
        password='build$5$bot'
    )
)

factory.addStep(ShellCommand(command=["rm", "-f", "amuseinstalled"], workdir='build/support/distribute/binbuild/build'))

factory.addStep(ShellCommand(command=["./build_amuseapp.sh"], workdir='build/support/distribute/binbuild/build'))

factory.addStep(
	FileUpload(
		slavesrc=WithProperties("support/distribute/binbuild/build/amuse-%(datestr)s-Linux_x86_64.tar.gz",datestr = lambda x : time.strftime('%Y%m%d')),
		masterdest=WithProperties("~/packages/binary/amuse-%(datestr)s-Linux_x86_64.tar.gz",datestr = lambda x : time.strftime('%Y%m%d')),
		mode=0644
	)
)
factory.addStep(
	MasterShellCommand(
		command = ["ln" , "-fs", 
			WithProperties("/home/vanelteren/packages/binary/amuse-%(datestr)s-Linux_x86_64.tar.gz",datestr = lambda x : time.strftime('%Y%m%d')),
			'/home/vanelteren/packages/binary/amuse-latests-Linux_x86_64.tar.gz'
		]
	)
)

c['builders'].append(
	BuilderConfig(
		name="binbuild",
		slavenames=["centos5-64bit"],
		factory=factory
	)
)


####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
from buildbot.status.web import authz
from buildbot.status.web import auth
authz_cfg = authz.Authz(
    auth=(auth.HTPasswdAuth('/home/vanelteren/buildbot/amuse/trac.htpasswd')),
    gracefulShutdown = False,
    forceBuild = 'auth', # use this to test your slave once it is set up
    forceAllBuilds = False,
    pingBuilder = False,
    stopBuild = 'auth',
    stopAllBuilds = False,
    cancelPendingBuild = 'auth',
)
c['status'].append(html.WebStatus(http_port=8010, authz=authz_cfg))

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = "AMUSE"
c['titleURL'] = "http://www.amusecode.org/"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://localhost:8010/"

####### DB URL

# This specifies what database buildbot uses to store change and scheduler
# state.  You can leave this at its default for all but the largest
# installations.
c['db_url'] = "sqlite:///state.sqlite"

