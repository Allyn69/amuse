===========================
Design - AMUSE Build system
===========================

The design of the AMUSE build system is based on the standard Python "distutils" toolset.

Every python distribution comes with the "distutls" code pre-installed. Most python modules are developed and distributes with this code. The tools support compiling and installing pure python code and also compiling and installing extension modules (C/C++/SWIG code). Common make like behaviour (like testing if files are out of date) is also included.

Python distutils scripts tend to be small and easy to maintain. The toolset includes a lot of default settings for the compilation of code thus eliminating the need for complicated configure scripts.

The distutils tools support most of the forseen use in AMUSE, but not every aspect is included (mainly for legacy codes):

* Support for compiling extra C or fortran files
* Finding all neccessary libraries typical for AMUSE (CUDA or graphe or boost or MPI or...)
* Automate the testing

To integrate the legacy build process with the AMUSE build process we will extend the distutils toolset with some functionality (This is also common practice in the Python world). 

Calling external make files with correct environment variables
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Most legacy codes are built using makefiles. We want to retain these files. We also want to automate the build process more (So less manual editing of the makefiles, currently the makefiles need to be adapted  with these codes). Therefor the makefiles will be called with a number of defines pre-determined by the python build script. This allows stand-alone makefiles that can also work within the AMUSE build system.
The makefile writes does have to use some pre-defined variable names, but these will be well documented.

For example a makefile of a legacy code may first contain:

::

 CUDALIB=-L/usr/cuda/lib -lcuda

and in AMUSE

::

 ifdef $(CUDA_LIBRARY)
 	CUDALIB = CUDA_LIBRARY
 else
 	CUDALIB = -L/usr/cuda/lib -lcuda
 endif

These changes do not have a large impact and keep the makefiles much the same as they were. Also all makefiles are still stand-alone and can be grasped in one go.

Notice the makefiles are only meant for compiling the legacy code files and not for interface code (f2py or swig). Building of interface code is highly supported by distutils tools. And these distutils tools will be used in the AMUSE build system. The interface code belongs more to AMUSE than the legacy codes and the build process will also be more integrated with AMUSE. 

Automated testing
~~~~~~~~~~~~~~~~~~~~~
The distutils tools will be extended with some testing commando's. This will allow automating of the testing. Automation in this case supports the easier writing of tests and more tests will be made.

Documentation generation
~~~~~~~~~~~~~~~~~~~~~~~~~~~
Part of the documentation will be in the code. An automated process is needed to build a documentation set from the code and other documentation texts.

Reporting
~~~~~~~~~~~~
The build process must report on the choosen options and which legacy codes are build on the platform (depends on availability of some libraries)

Make / configure like
~~~~~~~~~~~~~~~~~~~~~~~~
To support easier adaption a Makefile and configure script will also be includes. But these files refer to the python "setup.py" script for all useful functionality


author: Arjen van Elteren
