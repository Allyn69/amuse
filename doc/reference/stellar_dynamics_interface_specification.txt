=====================================
Stellar Dynamics Interface Definition
=====================================

=========== ============ ========= =========
Date        Author(s)    Version   State
=========== ============ ========= =========
13-10-2009  AvE          1.0       Initial
=========== ============ ========= =========

Introduction
~~~~~~~~~~~~

Data Types
----------
The exact size (in bytes) and type of the values send between the python layer and the legacy
codes is very important. In this document we will specify the type of each argument and return 
value. 

========== ======== ================ ================
Type name  Size     Fortran          C               
..         bytes    type             type             
========== ======== ================ ================ 
int32      4        integer          long             
float64    8        double precision double
float32    4        real             float
string     n                         char *
========== ======== ================ ================ 

Function template
------------------
All functions in the interface follow the same template. Every function returns an error
or status code. Results are returned through the function arguments. In C these arguments need
to be pointers to valid memory locations.

.. cfunction int32 example_function(int32 input, float64 * output)
    
    Example template for the other functions defined in this specification. All functions
    should follow this example. 
    
    :param input: Typical input parameter, the argument is passed by value to the function.
    :type input: int32, IN
    :param output: Typical output parameter, the argument is passed by reference. The 
          argument should point to a valid memory location.
    :type output: float64, OUT
    :returns: Function will return an error code.
        0 - OK
            Function encountered no error or special state
        <0 - ERROR
            Something went wrong in the execution of the function
        >0 - STATE
            Function has encountered an expected special state. For example the code
            has detected a collision between two stars.
    

Parameters
~~~~~~~~~~
Gravity dynamics codes have at least one specified parameter. Other parameters need
to be specified on a per code bases. All parameters have to be accessed with functions following
the template of the ``get_eps`` and ``set_eps`` functions. A parameter access function may only
retrieve or update the value of a single parameter. After all parameters have been set, the 
``initialize_code`` function should be called, this gives the code the opertunity prepare the
model.

.. autoclass:: amuse.legacy.interface.gd.GravitationalDynamics
   :members: get_eps2, set_eps2, initialize_code
   

Object Management
~~~~~~~~~~~~~~~~~
Most gravitational dynamics codes work on particles (stars, black holes or gas). The following 
methods define the functionality to create, remove and query the particles in the code. *Currently 
the interface does not handle different types of particles*

.. autoclass:: amuse.legacy.interface.gd.GravitationalDynamics
   :members: new_particle, delete_particle, get_number_of_particles, get_index_of_first_particle, get_index_of_next_particle

    
Object state
~~~~~~~~~~~~
Particles in gravitational dynamics have a well known, *minimal* state. This state is is defined
by a location, velocity and mass and radius. The state can be retrieved and updated with 
the following functions.

.. autoclass:: amuse.legacy.interface.gd.GravitationalDynamics
   :members: get_state, set_state
   

Object State, Extension Mechanism
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Not all information of a particle can be transfered with the get_state and set_state functions. To
support other properties (like acceleration), the code can define ``get_`` and ``set_`` functions. These
functions must get or set one scalar property (1 argument) or a vector property (3 arguments)


.. autoclass:: amuse.legacy.interface.gd.GravitationalDynamics
   :members: get_mass, set_mass, get_position, set_position


Model evolution
~~~~~~~~~~~~~~~
The gravitational dynamics code evolve the properties of the particles in time. The following functions
are needed to control the evolution in the code.

.. autoclass:: amuse.legacy.interface.gd.GravitationalDynamics
   :members: initialize_particles, evolve


Diagnostics
~~~~~~~~~~~
The state of the code can be queried, before, during and after the model calculations. The following 
function can be used to query the exact model time, the total energies and colliding particles.

.. autoclass:: amuse.legacy.interface.gd.GravitationalDynamics
   :members: get_time, get_kinetic_energy, get_potential_energy, get_indices_of_colliding_particles

Services
~~~~~~~~
Some Gravitational Dynamics codes can provide services for other codes. Currently calculating
the gravity at a given point is the only specified function.

.. autoclass:: amuse.legacy.interface.gd.GravitationalDynamics
   :members: get_gravity_at_point