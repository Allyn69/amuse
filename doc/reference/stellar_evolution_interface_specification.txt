=======================================
Stellar Evolution Interface Definition
=======================================

=========== ============ ========= =========
Date        Author(s)    Version   State
=========== ============ ========= =========
13-10-2009  AvE          1.0       Initial
=========== ============ ========= =========

Introduction
~~~~~~~~~~~~

Data Types
----------
The exact size (in bytes) and type of the values send between the python layer and the legacy
codes is very important. In this document we will specify the type of each argument and return 
value. 

========== ======== ================ ================
Type name  Size     Fortran          C               
..         bytes    type             type             
========== ======== ================ ================ 
int32      4        integer          long             
float64    8        double precision double
float32    4        real             float
string     n                         char *
========== ======== ================ ================ 

Function template
------------------
All functions in the interface follow the same template. Every function returns an error
or status code. Results are returned through the function arguments. In C these arguments need
to be pointers to valid memory locations.

.. autoclass:: amuse.legacy.interface.example.ExampleInterface
   :members:
            
The error codes all have the same general form. Zero stands for no error, a negative
value indicates some error happened, a positve value is returned when the function
ends in a special state.

0 - OK
    Function encountered no error or special state
<0 - ERROR
    Something went wrong in the execution of the function
>0 - STATE
    Function has encountered an expected special state.
        

Parameters
~~~~~~~~~~
Stellar Evolution codes have at least one specified parameter. Other parameters need
to be specified on a per code bases. All parameters have to be accessed with functions following
the template of the ``get_metallicity`` and ``set_metallicity`` functions. A parameter access function may only
retrieve or update the value of a single parameter. After all parameters have been set, the 
``initialize_code`` function should be called, this gives the code the opertunity prepare the
model.

.. autoclass:: amuse.legacy.interface.se.StellarEvolution
   :members: get_metallicity, set_metallicity, initialize_code
   

Object Management
~~~~~~~~~~~~~~~~~
A number of stellar evolution codes work on star objects. The following 
methods define the functionality to create, remove and query the particles in the code. 
*Currently the interface does not specify query function for stellar evolution, see stellar evolution for possible direction*

.. autoclass:: amuse.legacy.interface.se.StellarEvolution
   :members: new_zams_star, delete_star , get_number_of_stars, get_index_of_first_star, get_index_of_next_star
  

Object State
~~~~~~~~~~~~~~
To support properties (like acceleration), the code must define ``get_`` and ``set_`` functions. These
functions must get or set one scalar property (1 argument) or a vector property (3 arguments)
*Currently only get functions are specified*

.. autoclass:: amuse.legacy.interface.se.StellarEvolution
   :members: get_mass, get_radius, get_luminosity, get_temperature, get_age, get_type, get_stellar_type


Model evolution
~~~~~~~~~~~~~~~
The stellar evolution codes evolve the properties of the star in time. The following functions
are needed to control the evolution in the code.

.. autoclass:: amuse.legacy.interface.se.StellarEvolution
   :members: initialize_stars, evolve


Diagnostics
~~~~~~~~~~~
The state of the code can be queried, before, during and after the model calculations. 
*Currently no specific stellar evolution diagnostics functions have been defined*


Services
~~~~~~~~
Some stellar evolution codes can provide services for other codes. 
*Currently no specific stellar evolution service functions have been defined*