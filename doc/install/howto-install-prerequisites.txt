.. _prerequisite-label:

Installation of the prerequisite software
=========================================

Before installing AMUSE several software packages must be installed. These 
software packages can be installed manually or with two prepared installation
scripts. The installation scripts will install python and the 
other prerequisites in a user directory. No "root" access is required.

These are the packages AMUSE needs:

* Python (version >= 2.6)
* Numpy (version >= 1.3.0)
* HDF (version 1.6.5 - 1.8.3)
* h5py (version >= 1.2.0)
* MPI (OpenMPI or MPICH2)
* mpi4py (version >= 1.0)
* nose (version >= 0.11)
* docutils (version >= 0.6)
* FFTW (version >= 3.0)
* GSL
* CMake (version >= 2.4)

In the first two sections (compilers_ and installation_scripts_) we explain how to use the two
installation scripts to install AMUSE. In the last section (manual_) 
we have specified the required packages with the needed version for each.

.. _compilers:

Compilers
~~~~~~~~~

To build AMUSE from source you need to have a working  build environment.
The AMUSE build system needs a C++ and fortan 90 compiler. Please check first if you
have a working build environment on your system.

In Ubuntu you can setup the environment with (as root):

.. code-block:: sh

	apt-get install build-essential curl g++ gfortran gettext zlib1g-dev



In Fedora you can setup the environment with (as root):

.. code-block:: sh

	yum groupinstall "Development Tools" "Development Libraries"

.. _installation_scripts:

Installation scripts
~~~~~~~~~~~~~~~~~~~~

We have created two installation scripts to automate the installation of
the required packages on a LINUX and OS.X system. These scripts will
install these packages in a user directory. One script downloads and
installs python while the other script downloads and installs the libraries
and python packages. As everything is installed in a user directory these
packages can be installed even if a version of the software is already 
installed on your system. 

The scripts will download and install the software in a user directory. This
user directory must be specified with the ``PREFIX`` environment variable. Before
running the installation scripts you must set the ``PREFIX`` environment 
variable and update the path and library path. For shell (bash) you need to do:

.. code-block:: sh

	export PREFIX=~/amuse/prerequisites
	export PATH=${PREFIX}/bin:${PATH}
  	export LD_LIBRARY_PATH=${PREFIX}/lib:${LD_LIBRARY_PATH}


One script will download, build and install python on your system. The other 
script is written in Python and will download and install the other packages. 
Both scripts can be found in the ``doc/install`` directory. 

To start the installation do:

.. code-block:: sh

	# 1. Open a shell and go to the <doc/install> directory
	>

	# 2. Set the PREFIX, PATH and LD_LIBRARY_PATH environment variables:
  	> export PREFIX=~/amuse/prerequisites
  	> export PATH=${PREFIX}/bin:${PATH}
  	> export LD_LIBRARY_PATH=${PREFIX}/lib:${LD_LIBRARY_PATH}

	# 3. Start the installation script for python
	> ./install-python.sh

	# 4. Start the installation script for the prerequisite packages
	> ./install.py download
  	> ./install.py install

	# 5. Update your PATH variable in your profile. 
	# Make sure the `${PREFIX}/bin` directory is the first entry in the PATH!

You should now be able to install AMUSE.

Using the installation scripts on OS X
--------------------------------------

When installing the code on OS.X all steps are the same.The only difference 
is in setting the PATH variable. The PATH must be extended like this:

.. code-block:: sh

	export PATH=$PREFIX/Framework/Python.framework/Versions/2.6/bin:$PREFIX/bin:$PATH

.. _manual:

Manually installing the prerequisites
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Python
------
Python is probably already installed on your system. To check the version of python do:

.. code-block:: sh

	> python --version
	Python 2.6.2

You can download python from http://www.python.org. 

Numpy
-----
To check if numpy is installed on your system do:

.. code-block:: sh

	> python -c 'import numpy; print numpy.version.version'
	1.3.0

If this fails with an error or a version before 1.3 you need to install numpy.
You can download numpy from http://www.scipy.org/NumPy. 

HDF5 library
------------
HDF5 is a data format specification. The HDF group provides a C library 
to write and access HDF files.

To check if the HDF library is installed on your system do:

.. code-block:: sh

	> h5ls -V
	h5ls: Version 1.8.3

If this fails with an error or a version before 1.6.5 you 
need to install the HDF library. 
You can download HDF from http://www.hdfgroup.org/. 

h5py
----
To access HDF5 files from python we use the ``h5py`` library.

To check if the h5py library is installed on your system do:

.. code-block:: sh

	> python -c 'import h5py; print h5py.version.version'
	1.2.0

If this fails with an error or a version before 1.2.0 you need to install h5py.
You can download h5py from http://code.google.com/p/h5py/. 

docutils
--------
To check if the python docutils are installed on your system do:

.. code-block:: sh

        > python -c 'import docutils; print docutils.__version__'
        0.6

If this fails with an error or a version before 0.6 you need to install docutils.
You can download docutils from http://docutils.sourceforge.net/

MPI
---
The installed MPI framework must be MPI 2 compatible. AMUSE will work with 
MPICH2 or OpenMPI

MPICH2
******
MPICH2 is a portable implementation of the MPI 2 standard.

To check if MPICH2 is installed on your system do:

.. code-block:: sh
    
    > mpdhelp
    
    The following mpd commands are available.  For usage of any specific one,
    invoke it with the single argument --help .

    mpd           start an mpd daemon
    mpdtrace      show all mpd's in ring
    mpdboot       start a ring of daemons all at once
    mpdringtest   test how long it takes 
    ...
    
If this fails with an error you need to install MPICH2 or check for OpenMPI
support.
You can download MPICH2 from http://www.mcs.anl.gov/research/projects/mpich2/.

OpenMPI
*******
OpenMPI is another portable implementation of the MPI 2 standard

To check if OpenMPI is installed on your system do:

.. code-block:: sh
    
    > mpicxx -v 
    

If this fails with an error you need to install MPICH2 or OpenMPI
support. Most examples in the dopcumentation assume OpenMPI.
You can download OpenMPI from http://www.open-mpi.org/.

MPI4PY
------
To access MPI from python we use the ``mpi4py`` software.
To check if the mpi4py library is installed on your system do:

.. code-block:: sh

	> python -c 'import mpi4py; print mpi4py.__version__'
	1.0.0

If this fails with an error or a version before 1.0 you need to install mpi4py.
You can download mpi4py from http://code.google.com/p/mpi4py/. 

Nose
----
Nose is an extension of the python testing framework. It is used for all
unit testing in AMUSE.


To check if Nose is installed on your system do:

.. code-block:: sh
    
    > nosetests --version
    nosetests version 0.11.1
    ...
    
If this fails with an error or a version before 0.11 you need to install nose.
You can download nose from http://somethingaboutorange.com/mrl/projects/nose/. 

FFTW
----
FFTW is a C subroutine library for computing discrete Fourier transforms. To 
check for the availability of fftw on your system, you can use ``fftw-wisdom``:

.. code-block:: sh

   > fftw-wisdom --version
   fftw-wisdom tool for FFTW version 3.2.1.


You can download the FFTW library from http://www.fftw.org. 

GSL
-------
The GNU Scientific Library (GSL) is a numerical library for C and C++ 
programmers. It is free software under the GNU General Public License.
To check for the availability of GSL on your system, you can use ``gsl-config``:

.. code-block:: sh

   > gsl-config --version
   1.14


You can download GSL from http://www.gnu.org/software/gsl/. 

CMake
-------
CMake is a cross-platform, open-source build system. CMake is used to control 
the software compilation process using simple platform and compiler independent
configuration files. CMake generates native makefiles and workspaces that can 
be used in the compiler environment of your choice.
CMake is used to build EVTwin. 
To check whether you have CMake installed on your system:

.. code-block:: sh

   > cmake --version
   cmake version 2.8.2


You can download CMake from http://www.cmake.org/cmake/resources/software.html. 


Installing on Ubuntu 9.04
~~~~~~~~~~~~~~~~~~~~~~~~~

In this section we asume a default Ubuntu desktop installation.

Python
------
Ubuntu comes with python2.6 pre-installed, you can check if
python is installed by doing:

.. code-block:: sh

	> python --version
	Python 2.6.2

If this failes with an error or a version before 2.6, please install 
python first(the package is called ``python2.6``). You also need 
the ``python2.6-dev`` development package.
To install it, do::

    > sudo apt-get install python2.6-dev
    

GCC
---
By default, Ubuntu does not install a fortran 90 or a C++ compiler. We
suggest using gfortran and g++. These compilers are installed with
the ``build-essential`` and the ``gfortran`` package. 
To install these, do::

    > sudo apt-get install build-essential gfortran

MPI2
----
Ubuntu does not provide installation packages for MPICH2. You can 
build MPICH2 by hand (a good HOWTO can be found at 
https://wiki.ubuntu.com/MpichCluster). Or, you can download and install
pre-build packages from the MPICH2 site (http://www.mcs.anl.gov/research/projects/mpich2/index.php).

If you prefer OpenMpi over MPICH2, you can install openmpi
from the Ubuntu packages. To install
the openmpi packages, do::

     > sudo apt-get install libopenmpi-dev openmpi-bin 

HDF5
----
Amuse can work with HDF5 versions 1.6.* and 1.8.3. Ubuntu 9.04 comes
with HDF5 version 1.6.6. To install it, do::

    > sudo apt-get install libhdf5-serial-dev hdf5-tools 

FFTW
----
On Ubuntu, FFTW can be installed with::

    > sudo apt-get install libfftw3 libfftw3-dev libfftw3-doc

GSL
-------
On Ubuntu, GSL can be installed with::

    > sudo apt-get install libgsl0 libgsl0-dev

CMake
-------
CMake is used to build EVTwin. On Ubuntu, CMake can be installed with::

    > sudo apt-get install cmake

Python packages in Ubuntu
-------------------------
Ubuntu comes with python packages for nose and numpy. You also need 
the setuptools package to be able to install the ``mpi4py`` and ``h5py`` 
software. To install these , do::

    > sudo apt-get install python-nose python-numpy python-setuptools python-docutils

Python packages with easy_install
---------------------------------
The ``mpi4py`` and ``h5py`` can be installed with the ``easy_install``
command::

    > sudo easy_install mpi4py
    > sudo easy_install h5py
    
Installing on Ubuntu 9.10
~~~~~~~~~~~~~~~~~~~~~~~~~

In this section we asume a default Ubuntu desktop installation. This 
installation is for the most part the same as for Ubuntu 9.04, see 
previous section. 

The development packages of python are needed, to install these do::

    > sudo apt-get install python-dev 

FFTW
-------
For 9.10 the FFTW package name is fftw3 and not libfftw3, FFTW can be installed with::

    > sudo apt-get install fftw3 fftw3-dev fftw3-doc

 

Installing on Fedora 11
~~~~~~~~~~~~~~~~~~~~~~~

In this section we asume a live-cd install of Fedora 11 installation.

Python
------
Fedora comes with python2.6 pre-installed, you can check if
python is installed by doing:

.. code-block:: sh

	> python --version
	Python 2.6.2

If this failes with an error or a version before 2.6, please install 
python first(the package is called ``python``). You also need 
the ``python-devel`` development package.
To install it, do::

    > sudo yum install python-devel
    

GCC
---
By default, Fedora does not install a fortran 90 or a C++ compiler. We
suggest using gfortran and g++. These compilers are installed with
the ``gcc``, ``gcc-c++`` and the ``gcc-gfortran`` packages. 
To install these, do::

    > sudo yum install gcc gcc-c++ gcc-gfortran

MPI2
----
Fedora comes with packages for MPICH2 and Openmpi.

To install MPICH2, do::
    
    > sudo yum install mpich2 mpich2-devel

If you prefer OpenMpi over MPICH2, you can install openmpi
from the Fedora yum database. 
To install the openmpi packages, do::

     > sudo yum install openmpi openmpi-devel

HDF5
----
Amuse can work with HDF5 versions 1.6.* and 1.8.3. Fedora 11 has a package
with HDF5 version 1.8.3. To install it, do::

    > sudo yum install hdf5 hdf5-devel

FFTW
-------
On Fedora, FFTW can be installed with::

    > sudo yum install fftw fftw-devel

GSL
-------
On Fedora, GSL can be installed with::

    > sudo yum install gsl gsl-devel

CMake
-------
CMake is used to build EVTwin. On Fedora, CMake can be installed with::

    > sudo yum install cmake

Python packages in Fedora
-------------------------
Fedora comes with python packages for nose and numpy. You also need 
the setuptools package to be able to install the ``mpi4py`` and ``h5py`` 
software. To install these , do::

    > sudo yum install python-nose numpy numpy-f2py \
        python-setuptools python-setuptools-devel

Python packages with easy_install
---------------------------------
The ``mpi4py``, ``h5py`` and ``docutils`` can be 
installed with the ``easy_install`` command::

    > sudo easy_install mpi4py
    > sudo easy_install h5py
    > sudo easy_install docutils 
    
Installing on OpenSuse 11
~~~~~~~~~~~~~~~~~~~~~~~~~

In this section we asume a normal desktop install of OpenSuse 11. Not
all packages are available in the default OpenSuse package repository.
We recommend to add the **Packman Repository** to the list of 
configured sofware reporistories (To do so, open Yast and go to 
*Software Repositories*).

Python
------
OpenSuse comes with python2.6 pre-installed, you can check if
python is installed by doing:

.. code-block:: sh

	> python --version
	Python 2.6

If this failes with an error or a version before 2.6, please install 
python first(the package is called ``python``). You also need 
the ``python-devel`` development package.
To install it, do::

    > sudo zypper install python-devel
    

GCC
---
By default, OpenSuse does not install a fortran 90 or a C++ compiler. We
suggest using gfortran and g++. These compilers are installed with
the ``gcc``, ``gcc-c++`` and the ``gcc-fortran`` packages. 
To install these, do::

    > sudo zypper install gcc gcc-c++ gcc-fortran

MPI2
----
The Packman Repository provides an OpenMPI package.
To install the openmpi packages, do::

    > sudo zypper install openmpi openmpi-devel

Unfortunately the openmpi installation does not work out
of the box, you need to set the  **LD_LIBRARY_PATH** variable
and edit a configuration file first.

Setting the LD_LIBRARY_PATH
****************************

The LD_LIBRARY_PATH must be set so that mpi4py can find the
openmpi libraries. To set the variable we must first find out
where the openmpi libs can be found, to do so execute::

    > mpicxx -showme:link
    -pthread -L/usr/lib/mpi/gcc/openmpi/lib -lmpi_cxx -lmpi 
    -lopen-rte -lopen-pal -ldl -Wl,--export-dynamic -lnsl -lutil -lm -ldl
    

We need to set LD_LIBRARY_PATH variable to the path after the **-L**
in the output (so in this example case '/usr/lib/mpi/gcc/openmpi/lib',
this may be a different path if you system is 64-bits or if the
opensuse version is different).

In bash do::
    
    > export LD_LIBRARY_PATH=/usr/lib/mpi/gcc/openmpi/lib
    
We recommend you add this line to your '.bashrc' file so that
the variable is set correctly for all sessions. If you have a
C shell you need to do a *setenv* and edit the .cshrc file.

Editing the configuration file
*******************************

It seems that the default openmpi installation has some problems
with loading an LDAP library. To check if your installation has 
this problem do::

    > python -c "from mpi4py import MPI; print MPI.get_vendor()"
    ...
    WARNING: ....
    ...
    DAT: library load failure: libdaplscm.so.2: cannot open shared object file: No such file or directory
    ...

If you get a long list of warings about DAT providers not found, you
need to edit the configuration file and turn off ldap. To do so, 
open an editor (as root) on the file 
**/etc/openmpi-mca-params.conf** 
and add this line to the bottom of the file::

    btl = ^udapl

After saving the file, you can rerun the python statement::

    > python -c "from mpi4py import MPI; print MPI.get_vendor()"
    ('Open MPI', (1, 2, 8))
    
    
HDF5
----
Amuse can work with HDF5 versions 1.6.* and 1.8.*. The Packman Repository
has a package with HDF5 version 1.8.1. To install it, do::

    > sudo zypper install hdf5 hdf5-devel

FFTW
-------
Some codes in AMUSE need FFTW 3, FFTW can be installed with::

    > sudo zypper install fftw3 fftw3-devel

GSL
-------
On OpenSuse (10.2 and newer), GSL can be installed with::

    > sudo zypper install gsl gsl-devel

CMake
-------
CMake is used to build EVTwin. On OpenSuse, CMake can be installed with::

    > sudo zypper install cmake

Python packages in Fedora
-------------------------
Fedora comes with python packages for numpy. You also need 
the setuptools package to be able to install the other python
packages. To install these, do::

    > sudo zypper install python-numpy \
        python-setuptools python-setuptools-devel

Python packages with easy_install
---------------------------------
The  ``nose``, ``mpi4py``, ``h5py`` and ``docutils`` can be 
installed with the ``easy_install`` command::

    > sudo easy_install nose
    > sudo easy_install mpi4py
    > sudo easy_install h5py
    > sudo easy_install docutils 




Installing on MAC OS.X with MacPorts 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

In this section we asume a clean MacPorts installation. The MacPorts
build system will build every package from source so installation 
will be slow. The packages in MacPorts support different *variants*, each
*variant* is build differently. The default *variant* of most packages
does not support fortran and AMUSE needs fortran and fortran enabled
packages. Below, with all installation commands we will specify the variant.
AMUSE is tested with the gcc44 variant, gcc43 is known to work also, below,
we will use gcc44.

.. note::
    
    If you want to use a different fortran compiler (ifort), you are better 
    of using the **install.py** script in the **doc/install** directory.

.. note::

    Make sure you have a recent MacPorts installation. You need at least
    an up to date MacPorts 1.8.6 or later. 
    
.. note::
    
    If you are unsure of your installation you can uninstall and clear the 
    packages with::
    
        port uninstall py26-docutils py26-nose py26-mpi4py py26-h5py py26-numpy hdf5-18 fftw-3 gsl openmpi python26
    
    To make a clean install of MacPorts, please read the guide at:
    http://guide.macports.org/


GCC
---
By default MacPorts uses the XCode compilers, these compilers have no support
for fortran, a MacPorts gcc compiler set needs to be installed. We suggest
installing gcc 4.4:

.. code-block:: sh
    
    > sudo port install gcc44
    
.. note::
    
    If you have installed a different version of gcc, you need to select
    a different variant of the packages below. To select a different variant
    replace **+gcc44** with **+gcc43**, **+gcc42** or any other version
    matching your gcc installation. Note, apple-gcc versions will not work,
    these do not support fortran.

Python
------
MacPorts supports several python versions in different variants, we will install
the python26 versions

.. code-block:: sh

    > sudo port install python26 +gcc44
   
MPI2
----
MacPorts provides packages for mpich2 and openmpi. Although you can
probably install both, this is not recommended.

To install mpich2, do::

    > sudo port install mpich2 +gcc44

If you prefer OpenMpi over MPICH2, you can install openmpi with::

     > sudo port install openmpi +gcc44

HDF5
----
Amuse can work with HDF5 versions 1.6.* and 1.8.3. MacPorts comes
with HDF5 version 1.8.*. To install it, do::

    > sudo port install hdf5-18 +gcc44 

FFTW-3
------
MacPorts comes with a FFTW and FFTW-3 package, for AMUSE we need FFTW-3.
FFTW-3 can be installed with::

    > sudo port install fftw-3 +gcc44

GSL
---
GSL is used to build Gadget2, GSL can be installed with::

    > sudo port install gsl +gcc44

CMake
---
CMake is used to build EVTwin, CMake can be installed with::

    > sudo port install cmake

Python packages
---------------
By this point all libraries and frameworks are installed. We can now
install python packages (some depend on the installed libraries)::

    > sudo port install py26-numpy py26-h5py py26-nose py26-docutils +gcc44

If you installed openmpi in the MPI2 step you need to set the
"openmpi" variant for "py26-mpi4py"::

    > sudo port install py26-mpi4py +openmpi

For mpich2 no such variant is needed::

    > sudo port install py26-mpi4py


.. note::

    Macports will install the compilers under non standard names. To
    use the right compilers you need to specify these during the
    configure stage of AMUSE.
    
    See the output for ```configure --help``` for a list of all 
    environment variables you can set.
    
    If you installed openmpi you need to specify the mpi compilers 
    like so::
    
        ./configure MPICXX=openmpicxx MPICC=openmpicc MPIFC=openmpif90
    
    

    
author: Arjen van Elteren (vanelteren@strw.leidenuniv.nl)
date: 2010/09/22





